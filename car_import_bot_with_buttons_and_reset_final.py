from aiogram import Bot, Dispatcher, types, executor
import json
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = '7772557710:AAE9YdvAK3rOr_BEFyV4grUx5l2nf8KybBs'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

with open('iaai_fee_data.json') as f:
    iaai_fee_data = json.load(f)

with open('copart_fee_data.json') as f:
    copart_fee_data = json.load(f)

with open('delivery_dict.json') as f:
    delivery_prices = json.load(f)


    user_data = {}
    
    # –ö–Ω–æ–ø–∫–∏
    auction_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    auction_button_iaai = KeyboardButton("IAAI")
    auction_button_copart = KeyboardButton("Copart")
    auction_markup.add(auction_button_iaai, auction_button_copart)
    
    fuel_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    fuel_markup.add(
        KeyboardButton("‚õΩ –ë–µ–Ω–∑–∏–Ω"),
        KeyboardButton("‚ö° –ï–ª–µ–∫—Ç—Ä–æ"),
        KeyboardButton("üåÄ –ì—ñ–±—Ä–∏–¥"),
        KeyboardButton("üõ¢Ô∏è –î–∏–∑–µ–ª—å")
    )
    
    volume_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    volumes = ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '2.2', '2.4', '2.5', '2.7', '3.0', '3.2', '3.5', '3.7', '4.0']
    volume_markup.add(*[KeyboardButton(volume) for volume in volumes])
    
    year_markup = ReplyKeyboardMarkup(resize_keyboard=True)
    years = [str(year) for year in range(2005, 2025)]
    year_markup.add(*[KeyboardButton(year) for year in years])
    

def get_auction_fee(auction, price):
    data = iaai_fee_data if auction.upper() == "IAAI" else copart_fee_data
    for entry in data:
        if entry['min'] <= price <= entry['max']:
            if 'fee' in entry:
                return entry['fee']
            elif 'percent' in entry:
                return round(price * entry['percent'], 2)
    return 0

def search_delivery_locations(query):
    query = query.lower()
    return [city for city in delivery_prices if query in city.lower()][:10]

def calculate_customs(fuel, volume_liters, year, car_price, auction_fee):
    year = int(year)
    volume = float(volume_liters)
    age = max(1, 2025 - year)
    customs_base = car_price + auction_fee + 1600

    if fuel.lower() == "–µ–ª–µ–∫—Ç—Ä–æ":
        excise = 100
        duty = 0
        vat = 0
    else:
        if fuel.lower() == "–¥–∏–∑–µ–ª—å":
            rate = 150 if volume > 3.5 else 75
        elif fuel.lower() in ["–±–µ–Ω–∑–∏–Ω", "–≥—ñ–±—Ä–∏–¥"]:
            rate = 100 if volume > 3.0 else 50
        else:
            rate = 0
        excise = rate * age * volume
        duty = customs_base * 0.1
        vat = (customs_base + duty + excise) * 0.2

    return {
        "excise": round(excise, 2),
        "duty": round(duty, 2),
        "vat": round(vat, 2),
        "total": round(excise + duty + vat, 2)
    }

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_data[message.chat.id] = {}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∞—É–∫—Ü–∏–æ–Ω (Copart –∏–ª–∏ IAAI):")

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'auction' not in user_data[msg.chat.id])
async def auction_choice(message: types.Message):
    auction = message.text.strip().upper()
    if auction not in ["IAAI", "COPART"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ Copart –∏–ª–∏ IAAI.")
    user_data[message.chat.id]['auction'] = auction
    await message.answer("–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê:")

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'price' not in user_data[msg.chat.id])
async def price_input(message: types.Message):
    try:
        price = float(message.text.strip())
        user_data[message.chat.id]['price'] = price
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–ª–∞–π–ø–µ–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: TX, CA, PERRIS):")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ.")

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'delivery_location' not in user_data[msg.chat.id])
async def delivery_location_handler(message: types.Message):
    query = message.text.strip()
    matches = search_delivery_locations(query)
    if not matches:
        return await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    if len(matches) == 1:
        location = matches[0]
        user_data[message.chat.id]['delivery_location'] = location
        user_data[message.chat.id]['delivery_price'] = delivery_prices[location]
        await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞: {location}\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–ª–∞–π–ø–µ–¥—É: ${delivery_prices[location]}")
        await message.answer("–£–∫–∞–∂–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (–ë–µ–Ω–∑–∏–Ω, –î–∏–∑–µ–ª—å, –ì—ñ–±—Ä–∏–¥, –ï–ª–µ–∫—Ç—Ä–æ):")
    else:
        reply_text = "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –ø–ª–æ—â–∞–¥–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n" + "\n".join(matches)
        await message.answer(reply_text)

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'fuel' not in user_data[msg.chat.id])
async def save_fuel(message: types.Message):
    fuel = message.text.strip().capitalize()
    if fuel not in ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì—ñ–±—Ä–∏–¥", "–ï–ª–µ–∫—Ç—Ä–æ"]:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞.")
    user_data[message.chat.id]['fuel'] = fuel
    await message.answer("–£–∫–∞–∂–∏ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.0):")

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'volume' not in user_data[msg.chat.id])
async def save_volume(message: types.Message):
    try:
        volume = float(message.text.strip())
        user_data[message.chat.id]['volume'] = volume
        await message.answer("–£–∫–∞–∂–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ:")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è.")

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'year' not in user_data[msg.chat.id])
async def save_year(message: types.Message):
    try:
        year = int(message.text.strip())
        user_data[message.chat.id]['year'] = year
        await show_calculations(message)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2018")

async def show_calculations(message):
    data = user_data[message.chat.id]
    auction = data['auction']
    price = data['price']
    delivery_price = data['delivery_price']
    fuel = data['fuel']
    volume = data['volume']
    year = data['year']

    auction_fee = get_auction_fee(auction, price)
    payment_fee = round((price + auction_fee + delivery_price) * 0.05, 2)
    customs = calculate_customs(fuel, volume, year, price, auction_fee)

    expeditor = 500
    delivery_to_ua = 1000
    certification = 125
    mreo = 45
    stscars = 500

    customs_base = price + auction_fee + 1600
    if fuel.lower() == "–µ–ª–µ–∫—Ç—Ä–æ":
        pension = 0
        pension_percent = 0
    elif customs_base < 11500:
        pension_percent = 3
    elif 11500 <= customs_base < 20000:
        pension_percent = 4
    else:
        pension_percent = 5
    pension = round(customs_base * (pension_percent / 100), 2)

    total = sum([
        price, auction_fee, payment_fee, delivery_price,
        customs['total'], expeditor, delivery_to_ua,
        certification, pension, mreo, stscars
    ])

    response = (
        f"üì¶ –†–∞—Å—á—ë—Ç –∏–º–ø–æ—Ä—Ç–∞:\n\n"
        f"–ê—É–∫—Ü–∏–æ–Ω: {auction}\n"
        f"–¶–µ–Ω–∞ –∞–≤—Ç–æ: ${price}\n"
        f"–°–±–æ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞: ${auction_fee}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–ø–ª–∞—Ç—É: ${payment_fee}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ö–ª–∞–π–ø–µ–¥—É: ${delivery_price}\n\n"
        f"üöõ –†–∞—Å—Ç–∞–º–æ–∂–∫–∞:\n"
        f"–ê–∫—Ü–∏–∑: ${customs['excise']}\n"
        f"–ú–∏—Ç–æ: ${customs['duty']}\n"
        f"–ü–î–í: ${customs['vat']}\n"
        f"–ò—Ç–æ–≥–æ: ${customs['total']}\n\n"
        f"üìÑ –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã:\n"
        f"–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä: ${expeditor}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –£–∫—Ä–∞–∏–Ω—É: ${delivery_to_ua}\n"
        f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${certification}\n"
        f"–ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥ ({pension_percent}%): ${pension}\n"
        f"–ú–†–ï–û: ${mreo}\n"
        f"STScars: ${stscars}\n\n"
        f"üí∞ –§–∏–Ω–∞–ª—å–Ω–æ: *${round(total, 2)}*"
    )

    await message.answer(response, parse_mode="Markdown")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–∫—Ü–∏–æ–Ω–∞
auction_markup = ReplyKeyboardMarkup(resize_keyboard=True)
auction_button_iaai = KeyboardButton("IAAI")
auction_button_copart = KeyboardButton("Copart")
auction_markup.add(auction_button_iaai, auction_button_copart)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
year_markup = ReplyKeyboardMarkup(resize_keyboard=True)
years = [str(year) for year in range(2010, 2026)]  # –ì–æ–¥–∞ —Å 2010 –ø–æ 2025
year_markup.add(*[KeyboardButton(year) for year in years])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
volume_markup = ReplyKeyboardMarkup(resize_keyboard=True)
volumes = ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '2.2', '2.4', '2.5', '2.7', '3.0', '3.2', '3.5', '3.7', '4.7', '5.0', '4.0']
volume_markup.add(*[KeyboardButton(volume) for volume in volumes])

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
restart_markup = ReplyKeyboardMarkup(resize_keyboard=True)
restart_button = KeyboardButton("üîÅ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É")
restart_markup.add(restart_button)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_data[message.chat.id] = {}  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –∞—É–∫—Ü—ñ–æ–Ω (Copart –∞–±–æ IAAI):", reply_markup=auction_markup)

# –í—ã–±–æ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞
@dp.message_handler(lambda msg: msg.chat.id in user_data and 'auction' not in user_data[msg.chat.id])
async def auction_choice(message: types.Message):
    auction = message.text.strip().upper()
    if auction not in ["IAAI", "COPART"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ Copart –∞–±–æ IAAI.")
    user_data[message.chat.id]['auction'] = auction
    await message.answer("–í–≤–µ–¥–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –≤ –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê:")

# –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ
@dp.message_handler(lambda msg: msg.chat.id in user_data and 'price' not in user_data[msg.chat.id])
async def price_input(message: types.Message):
    try:
        price = float(message.text.strip())
        user_data[message.chat.id]['price'] = price
        await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ö–ª–∞–π–ø–µ–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: TX, CA, PERRIS):")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É —á–∏—Å–ª–æ–≤—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ.")

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
fuel_markup = ReplyKeyboardMarkup(resize_keyboard=True)
fuel_button_benzin = KeyboardButton("–ë–µ–Ω–∑–∏–Ω")
fuel_button_diesel = KeyboardButton("–î–∏–∑–µ–ª—å")
fuel_button_hybrid = KeyboardButton("–ì—ñ–±—Ä–∏–¥")
fuel_button_electro = KeyboardButton("–ï–ª–µ–∫—Ç—Ä–æ")
fuel_markup.add(fuel_button_benzin, fuel_button_diesel, fuel_button_hybrid, fuel_button_electro)

@dp.message_handler(lambda msg: msg.chat.id in user_data and 'price' in user_data[msg.chat.id] and 'fuel' not in user_data[msg.chat.id])
async def fuel_input(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ —Ç–∏–ø –ø–∞–ª—å–Ω–æ–≥–æ:", reply_markup=fuel_markup)

# –í—ã–±–æ—Ä –≥–æ–¥–∞
@dp.message_handler(lambda msg: msg.chat.id in user_data and 'fuel' in user_data[msg.chat.id] and 'year' not in user_data[msg.chat.id])
async def save_year(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ (2010‚Äì2025):", reply_markup=year_markup)

# –í—ã–±–æ—Ä –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
@dp.message_handler(lambda msg: msg.chat.id in user_data and 'year' in user_data[msg.chat.id] and 'volume' not in user_data[msg.chat.id])
async def save_volume(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ –æ–± º—î–º –¥–≤–∏–≥—É–Ω–∞ (1.0‚Äì5.0):", reply_markup=volume_markup)


# –í—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
@dp.message_handler(lambda msg: msg.chat.id in user_data and 'volume' in user_data[msg.chat.id] and 'delivery_location' not in user_data[msg.chat.id])
async def delivery_location_handler(message: types.Message):
    query = message.text.strip().lower()
    matches = [location for location in delivery_prices if query in location.lower()]
    
    if matches:
        location_markup = ReplyKeyboardMarkup(resize_keyboard=True)
        location_markup.add(*[KeyboardButton(location) for location in matches[:10]])
        
        if len(matches) > 10:
            await message.answer("–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω –∑ –Ω–∏–∂—á–µ:", reply_markup=location_markup)
        else:
            user_data[message.chat.id]['delivery_location'] = matches[0]
            user_data[message.chat.id]['delivery_price'] = delivery_prices[matches[0]]
            await message.answer(f"–í–∏–±—Ä–∞–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞: {matches[0]}\n–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ö–ª–∞–π–ø–µ–¥–∏: ${delivery_prices[matches[0]]}")
    else:
        await message.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏.")


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
@dp.message_handler(lambda msg: msg.text == "üîÅ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É")
async def restart_handler(message: types.Message):
    user_data[message.chat.id] = {}
    await start_command(message)